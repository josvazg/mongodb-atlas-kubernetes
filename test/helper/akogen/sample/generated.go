// Generated by AKOGen code Generator - do not edit

package sample

import (
	"context"
	pointer "github.com/mongodb/mongodb-atlas-kubernetes/v2/internal/pointer"
	"github.com/mongodb/mongodb-atlas-kubernetes/v2/test/helper/akogen/lib"
)

type wrapper struct {
	api lib.API
}

func (w *wrapper) Create(ctx context.Context, r *Resource) (*Resource, error) {
	libR, err := w.api.Create(ctx, toAtlas(r))
	if err != nil {
		return nil, err
	}
	return fromAtlas(libR), nil
}

func (w *wrapper) Get(ctx context.Context, s string) (*Resource, error) {
	libR, err := w.api.Get(ctx, s)
	if err != nil {
		return nil, err
	}
	return fromAtlas(libR), nil
}

func toAtlas(r *Resource) *lib.Resource {
	if r == nil {
		return nil
	}
	return &lib.Resource{
		ComplexSubtype: complexSubtypeToAtlas(r.ComplexSubtype),
		Enabled:        pointer.MakePtr(r.Enabled),
		Id:             r.ID,
		OptionalRef:    optionalRefToAtlas(r.OptionalRef),
		SelectedOption: pointer.MakePtr(string(r.SelectedOption)),
		Status:         pointer.MakePtr(r.Status),
	}
}

func fromAtlas(libR *lib.Resource) *Resource {
	if libR == nil {
		return nil
	}
	return &Resource{
		ComplexSubtype: complexSubtypeFromAtlas(libR.ComplexSubtype),
		Enabled:        pointer.GetOrDefault(libR.Enabled, false),
		ID:             libR.Id,
		OptionalRef:    optionalRefFromAtlas(libR.OptionalRef),
		SelectedOption: OptionType(pointer.GetOrDefault(libR.SelectedOption, "")),
		Status:         pointer.GetOrDefault(libR.Status, ""),
	}
}

func complexSubtypeToAtlas(cs ComplexSubtype) lib.ComplexSubtype {
	return lib.ComplexSubtype{
		Name:    cs.Name,
		Subtype: string(cs.Subtype),
	}
}

func complexSubtypeFromAtlas(libCs lib.ComplexSubtype) ComplexSubtype {
	return ComplexSubtype{
		Name:    libCs.Name,
		Subtype: Subtype(libCs.Subtype),
	}
}

func optionalRefToAtlas(or *OptionalRef) *lib.OptionalRef {
	if or == nil {
		return nil
	}
	return &lib.OptionalRef{Ref: or.Ref}
}

func optionalRefFromAtlas(libOr *lib.OptionalRef) *OptionalRef {
	if libOr == nil {
		return nil
	}
	return &OptionalRef{Ref: libOr.Ref}
}

// Generated by AKOGen code Generator - do not edit
